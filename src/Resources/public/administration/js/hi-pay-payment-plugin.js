(function(){var e={670:function(){},759:function(){},228:function(){},393:function(){},494:function(){Shopware.Component.register("hipay-html-bloc",{template:'<div v-html="html()"></div>',methods:{html(){let e=this.$attrs.name.slice(this.$attrs.name.lastIndexOf(".")+1);return"<"+e+">"+this.$tc(this.$parent.$parent.bind.value)+"</"+e+">"}}})},51:function(){let{Application:e,Classes:t}=Shopware,n=t.ApiService;class a extends n{constructor(e,t,n="hipay"){super(e,t,n),this.headers=this.getBasicHeaders({})}getCurrencyFormater(e){return new Intl.NumberFormat(localStorage.getItem("sw-admin-locale"),{style:"currency",currency:e})}getLogsArrayBuffer(){let e=this.getBasicHeaders({});return this.httpClient({headers:e,method:"get",url:`/_action/${this.getApiBasePath()}/get-logs`,responseType:"arraybuffer"})}validateConfig(e){let t=this.getBasicHeaders({});return this.httpClient.post(`/_action/${this.getApiBasePath()}/checkAccess`,e,{headers:t}).then(e=>n.handleResponse(e))}cancelTransaction(e){let t=this.getBasicHeaders({});return this.httpClient.post(`/_action/${this.getApiBasePath()}/cancel`,{hipayOrder:JSON.stringify(e)},{headers:t}).then(e=>n.handleResponse(e))}captureTransaction(e,t){let a=this.getBasicHeaders({});return this.httpClient.post(`/_action/${this.getApiBasePath()}/capture`,{hipayOrder:JSON.stringify(e),amount:t},{headers:a}).then(e=>n.handleResponse(e))}refundTransaction(e,t){let a=this.getBasicHeaders({});return this.httpClient.post(`/_action/${this.getApiBasePath()}/refund`,{hipayOrder:JSON.stringify(e),amount:t},{headers:a}).then(e=>n.handleResponse(e))}}e.addServiceProvider("hipayService",t=>new a(e.getContainer("init").httpClient,t.loginService))},939:function(e,t,n){var a=n(670);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),n(346).Z("08c8a1f9",a,!0,{})},118:function(e,t,n){var a=n(759);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),n(346).Z("2d5f3036",a,!0,{})},6:function(e,t,n){var a=n(228);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),n(346).Z("56469336",a,!0,{})},99:function(e,t,n){var a=n(393);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),n(346).Z("dee60a4c",a,!0,{})},346:function(e,t,n){"use strict";function a(e,t){for(var n=[],a={},i=0;i<t.length;i++){var s=t[i],r=s[0],o={id:e+":"+i,css:s[1],media:s[2],sourceMap:s[3]};a[r]?a[r].parts.push(o):n.push(a[r]={id:r,parts:[o]})}return n}n.d(t,{Z:function(){return m}});var i="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!i)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var s={},r=i&&(document.head||document.getElementsByTagName("head")[0]),o=null,l=0,u=!1,c=function(){},d=null,p="data-vue-ssr-id",h="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function m(e,t,n,i){u=n,d=i||{};var r=a(e,t);return y(r),function(t){for(var n=[],i=0;i<r.length;i++){var o=s[r[i].id];o.refs--,n.push(o)}t?y(r=a(e,t)):r=[];for(var i=0;i<n.length;i++){var o=n[i];if(0===o.refs){for(var l=0;l<o.parts.length;l++)o.parts[l]();delete s[o.id]}}}}function y(e){for(var t=0;t<e.length;t++){var n=e[t],a=s[n.id];if(a){a.refs++;for(var i=0;i<a.parts.length;i++)a.parts[i](n.parts[i]);for(;i<n.parts.length;i++)a.parts.push(g(n.parts[i]));a.parts.length>n.parts.length&&(a.parts.length=n.parts.length)}else{for(var r=[],i=0;i<n.parts.length;i++)r.push(g(n.parts[i]));s[n.id]={id:n.id,refs:1,parts:r}}}}function f(){var e=document.createElement("style");return e.type="text/css",r.appendChild(e),e}function g(e){var t,n,a=document.querySelector("style["+p+'~="'+e.id+'"]');if(a){if(u)return c;a.parentNode.removeChild(a)}if(h){var i=l++;t=v.bind(null,a=o||(o=f()),i,!1),n=v.bind(null,a,i,!0)}else t=w.bind(null,a=f()),n=function(){a.parentNode.removeChild(a)};return t(e),function(a){a?(a.css!==e.css||a.media!==e.media||a.sourceMap!==e.sourceMap)&&t(e=a):n()}}var b=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function v(e,t,n,a){var i=n?"":a.css;if(e.styleSheet)e.styleSheet.cssText=b(t,i);else{var s=document.createTextNode(i),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(s,r[t]):e.appendChild(s)}}function w(e,t){var n=t.css,a=t.media,i=t.sourceMap;if(a&&e.setAttribute("media",a),d.ssrId&&e.setAttribute(p,t.id),i&&(n+="\n/*# sourceURL="+i.sources[0]+" */\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},t={};function n(a){var i=t[a];if(void 0!==i)return i.exports;var s=t[a]={id:a,exports:{}};return e[a](s,s.exports,n),s.exports}n.d=function(e,t){for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="bundles/hipaypaymentplugin/",window?.__sw__?.assetPath&&(n.p=window.__sw__.assetPath+"/bundles/hipaypaymentplugin/"),function(){"use strict";n(51),n(494),n(939),Shopware.Component.register("hipay-help-bloc",{template:'<div class="hipay-help">\n  <div class="hipay-help-bloc">\n    <div class="hipay-help-bloc-item">\n      <sw-icon name="regular-file"></sw-icon>\n      <a href="https://support.hipay.com"\n        class="mt-button sw-button sw-button--primary"\n        target="_blank"\n        rel="noopener"\n        :title="$tc(\'hipay.config.help.manual\')">\n        {{ $tc(\'hipay.config.help.manual\') }}\n      </a>\n    </div>\n\n    <div class="hipay-help-bloc-item">\n      <sw-icon name="regular-code"></sw-icon>\n      <a href="https://github.com/hipay/hipay-enterprise-shopware-6"\n        class="mt-button sw-button sw-button--primary"\n        rel="noopener"\n        target="_blank"\n        :title="$tc(\'hipay.config.help.manual\')">\n        {{ $tc(\'hipay.config.help.github\') }}\n      </a>\n    </div>\n\n    <div class="hipay-help-bloc-item">\n      <sw-icon name="regular-cloud-upload"></sw-icon>\n      <p class="version-text">\n        {{ $tc(\'hipay.config.help.version\') }} : {{ version }}\n      </p>\n    </div>\n  </div>\n</div>\n',data(){return{version:"2.3.0"}}}),Shopware.Component.register("hipay-help-info",{template:'<sw-alert>\n  <div v-html="$tc(text)"></div>\n</sw-alert>\n',data(){return{text:this.$parent.$parent.bind.value}}});let{Component:e,Mixin:t}=Shopware;e.register("hipay-check-server-access",{template:'<sw-button-process style="margin-top: 20px"\n  class="sw-button--primary"\n  :disabled="isLoading"\n  :isLoading="isLoading"\n  :processSuccess="success"\n  @update:processSuccess="completeSucess"\n  @click="validateConfig">\n  {{ $tc(\'hipay.config.checkAccess.button\') }}\n</sw-button-process>\n',inject:["hipayService"],mixins:[t.getByName("notification")],props:{value:{required:!1}},data(){return{isLoading:!1,success:!1}},methods:{completeSucess(){this.sucess=!1},validateConfig(){this.isLoading=!0;let e=this.$tc("hipay.config.checkAccess.title");this.hipayService.validateConfig(this.getConfig()).then(t=>{if(!t.success)throw Error(t.message);this.createNotificationSuccess({title:e,message:this.$tc("hipay.config.checkAccess.success")}),this.success=!0}).catch(t=>{this.createNotificationError({title:e,message:t.message||this.$tc("hipay.config.checkAccess.failure")})}).finally(()=>this.isLoading=!1)},getConfig(){let e=this.$parent;for(;void 0===e.actualConfigData;)e=e.$parent;let t=e.currentSalesChannelId,n=e.actualConfigData;return Object.assign({},n.null,n[t],{environment:this.$parent.$parent.bind.env,isApplePay:"true"===this.$parent.$parent.bind.isApplePay})}}});let{Component:a,Mixin:i}=Shopware;a.register("hipay-download-logs",{template:'<sw-button-process style="margin-top: 20px"\n  class="sw-button--primary"\n  :disabled="isLoading"\n  :isLoading="isLoading"\n  :processSuccess="success"\n  @update:processSuccess="completeSucess"\n  @click="downloadLogs">\n  {{ $tc(\'hipay.config.logs.download\') }}\n</sw-button-process>\n',inject:["hipayService"],mixins:[i.getByName("notification")],props:{value:{required:!1}},data(){return{isLoading:!1,success:!1}},methods:{completeSucess(){this.sucess=!1},downloadLogs(){this.isLoading=!0;let e=this.$tc("hipay.config.logs.title");this.hipayService.getLogsArrayBuffer().then(e=>{let t=new Blob([e.data],{type:"application/octet-stream"}),n=window.URL.createObjectURL(t),a=document.createElement("a");a.href=n;let i=e.headers["content-disposition"].split('"');a.download=i[1],document.body.appendChild(a),a.dispatchEvent(new MouseEvent("click",{bubbles:!0,cancelable:!0,view:window})),window.URL.revokeObjectURL(n),document.body.removeChild(a)}).catch(t=>{this.createNotificationError({title:e,message:t.message||this.$tc("hipay.config.logs.failure")})}).finally(()=>this.isLoading=!1)}}}),Shopware.Component.register("hipay-settings-cards-selector",{template:'<sw-card position-identifier="sw-settings-payment-detail-content"\n  :title="$tc(\'hipay.settings.creditcard.title\')"\n  :is-loading="isLoading">\n  <sw-multi-select :label="$tc(\'hipay.settings.creditcard.choice\')"\n    :options="availableCards"\n    :value="paymentMethod.customFields?.cards || []"\n    @update:value="updateCardsValue"></sw-multi-select>\n</sw-card>\n',props:{isLoading:{type:Boolean,required:!0},paymentMethod:{type:Object,required:!0}},data(){return{availableCards:[{label:"Carte Bancaire",value:"cb"},{label:"VISA",value:"visa"},{label:"MasterCard",value:"mastercard"},{label:"Amercian Express",value:"american-express"},{label:"Bancontact / Mister Cash",value:"bcmc"},{label:"Maestro",value:"maestro"}]}},methods:{updateCardsValue(e){null===this.paymentMethod.customFields?this.paymentMethod.customFields={cards:e}:this.paymentMethod.customFields.cards=e}}}),Shopware.Component.register("hipay-settings-multibanco",{template:'<sw-card position-identifier="sw-settings-payment-detail-content"\n  :title="$tc(\'hipay.settings.multibanco.title\')"\n  :is-loading="isLoading">\n   <sw-field\n        type="select"\n        :value="paymentMethod.customFields?.expiration_limit || \'3\'"\n        @update:value="updateLimitValue"\n    >\n      <option\n          v-for="limit in availableLimits"\n          :value="limit.value"\n          :selected="paymentMethod.customFields?.expiration_limit === limit.value"\n      >\n          {{ limit.label }}\n      </option>\n    </sw-field>\n</sw-card>\n',props:{isLoading:{type:Boolean,required:!0},paymentMethod:{type:Object,required:!0}},data(){return{availableLimits:[{label:`3 ${this.$tc("hipay.config.days")}`,value:"3"},{label:`30 ${this.$tc("hipay.config.days")}`,value:"30"},{label:`90 ${this.$tc("hipay.config.days")}`,value:"90"}]}},methods:{updateLimitValue(e){null===this.paymentMethod.customFields?this.paymentMethod.customFields={...this.paymentMethod.customFields,expiration_limit:e}:this.paymentMethod.customFields.expiration_limit=e}}}),Shopware.Component.register("hipay-settings-applepay",{template:'<sw-card position-identifier="sw-settings-payment-detail-content"\n  :title="$tc(\'hipay.settings.applepay.title\')"\n  :is-loading="isLoading">\n\n  <sw-text-field :label="$tc(\'hipay.settings.applepay.merchantName\')"\n          :value="paymentMethod.customFields?.merchantName"\n          :disabled="false"\n          @update:value="updateMerchantName">\n  </sw-text-field>\n\n  <sw-select-field \n    :label="$tc(\'hipay.settings.applepay.buttonType.title\')"\n    :value="paymentMethod.customFields?.buttonType || \'default\'"\n    @update:value="updateButtonType">\n        <option\n            v-for="buttonType in buttonTypes"\n            :key="buttonType.value"\n            :value="buttonType.value"\n        >\n            {{ buttonType.label }}\n        </option>\n  </sw-select-field>\n\n  <sw-select-field \n    :label="$tc(\'hipay.settings.applepay.buttonStyle.title\')"\n    :value="paymentMethod.customFields?.buttonStyle || \'black\'"\n    @update:value="updateButtonStyle">\n        <option\n            v-for="buttonStyle in buttonStyles"\n            :key="buttonStyle.value"\n            :value="buttonStyle.value"\n        >\n            {{ buttonStyle.label }}\n        </option>\n  </sw-select-field>\n\n  <sw-text-field :label="$tc(\'hipay.settings.applepay.merchantId\')"\n          :value="paymentMethod.customFields?.merchantId"\n          :disabled="false"\n          @update:value="updateMerchantId">\n  </sw-text-field>\n</sw-card>\n',props:{isLoading:{type:Boolean,required:!0},paymentMethod:{type:Object,required:!0}},data(){return{buttonTypes:[{label:this.$tc("hipay.settings.applepay.buttonType.default"),value:"default"},{label:this.$tc("hipay.settings.applepay.buttonType.buy"),value:"buy"},{label:this.$tc("hipay.settings.applepay.buttonType.setup"),value:"set-up"},{label:this.$tc("hipay.settings.applepay.buttonType.donate"),value:"donate"},{label:this.$tc("hipay.settings.applepay.buttonType.checkout"),value:"check-out"},{label:this.$tc("hipay.settings.applepay.buttonType.processing"),value:"processing"},{label:this.$tc("hipay.settings.applepay.buttonType.book"),value:"book"},{label:this.$tc("hipay.settings.applepay.buttonType.subscribe"),value:"subscribe"}],buttonStyles:[{label:this.$tc("hipay.settings.applepay.buttonStyle.black"),value:"black"},{label:this.$tc("hipay.settings.applepay.buttonStyle.white"),value:"white"},{label:this.$tc("hipay.settings.applepay.buttonStyle.whiteOutline"),value:"white-outline"}]}},methods:{updateMerchantName(e){null===this.paymentMethod.customFields?this.paymentMethod.customFields={...this.paymentMethod.customFields,merchantName:e}:this.paymentMethod.customFields.merchantName=e},updateButtonType(e){null===this.paymentMethod.customFields?this.paymentMethod.customFields={...this.paymentMethod.customFields,buttonType:e}:this.paymentMethod.customFields.buttonType=e},updateButtonStyle(e){null===this.paymentMethod.customFields?this.paymentMethod.customFields={...this.paymentMethod.customFields,buttonStyle:e}:this.paymentMethod.customFields.buttonStyle=e},updateMerchantId(e){null===this.paymentMethod.customFields?this.paymentMethod.customFields={...this.paymentMethod.customFields,merchantId:e}:this.paymentMethod.customFields.merchantId=e}}}),Shopware.Component.register("hipay-settings-paypal",{template:'<sw-card position-identifier="sw-settings-payment-detail-content"\n  :title="$tc(\'hipay.settings.paypal.title\')"\n  :is-loading="isLoading">\n\n    <sw-alert v-if="!isPayPalV2">\n        <div>{{ $tc(\'hipay.settings.paypal.info\')}}</div>\n    </sw-alert>\n\n    <sw-select-field :label="$tc(\'hipay.settings.paypal.color.title\')"\n        :value="paymentMethod.customFields?.color || \'gold\'"\n        :disabled="!isPayPalV2"\n        @update:value="updateColor">\n            <option\n                v-for="color in colors"\n                :key="color.value"\n                :value="color.value"\n            >\n                {{ color.label }}\n            </option>\n    </sw-select-field>\n\n    <sw-select-field :label="$tc(\'hipay.settings.paypal.shape.title\')"\n        :value="paymentMethod.customFields?.shape || \'pill\'"\n        :disabled="!isPayPalV2"\n        @update:value="updateShape">\n            <option\n                v-for="shape in shapes"\n                :key="shape.value"\n                :value="shape.value"\n            >\n                {{ shape.label }}\n            </option>\n    </sw-select-field>\n\n    <sw-select-field :label="$tc(\'hipay.settings.paypal.label.title\')"\n        :value="paymentMethod.customFields?.label || \'paypal\'"\n        :disabled="!isPayPalV2"\n        @update:value="updateLabel">\n            <option\n                v-for="label in labels"\n                :key="label.value"\n                :value="label.value"\n            >\n                {{ label.label }}\n            </option>\n    </sw-select-field>\n\n    <sw-number-field numberType="int"\n        :disabled="!isPayPalV2"\n        :label="$tc(\'hipay.settings.paypal.height.title\')"\n        :step="1"\n        :min="25"\n        :max="55"\n        :value="paymentMethod.customFields?.height || \'40\'"\n        @update:value="updateHeight">\n    </sw-number-field>\n\n    <sw-alert>\n        <div>{{ $tc(\'hipay.settings.paypal.info_bnpl\')}}</div>\n    </sw-alert>\n\n    <sw-switch-field\n        :value="paymentMethod.customFields?.bnpl"\n        :disabled="!isPayPalV2"\n        :label="$tc(\'hipay.settings.paypal.bnpl_label\')"\n        @update:value="updateBnpl"\n    ></sw-switch-field>\n</sw-card>\n',inject:["systemConfigApiService"],props:{isLoading:{type:Boolean,required:!0},paymentMethod:{type:Object,required:!0}},data(){return{config:null,environment:null,apiUsername:null,apiPassword:null,authorizationHeader:null,availablePaymentProducts:null,isPayPalV2:null,colors:[{label:this.$tc("hipay.settings.paypal.color.gold"),value:"gold"},{label:this.$tc("hipay.settings.paypal.color.blue"),value:"blue"},{label:this.$tc("hipay.settings.paypal.color.black"),value:"black"},{label:this.$tc("hipay.settings.paypal.color.silver"),value:"silver"},{label:this.$tc("hipay.settings.paypal.color.white"),value:"white"}],shapes:[{label:this.$tc("hipay.settings.paypal.shape.pill"),value:"pill"},{label:this.$tc("hipay.settings.paypal.shape.rect"),value:"rect"}],labels:[{label:this.$tc("hipay.settings.paypal.label.paypal"),value:"paypal"},{label:this.$tc("hipay.settings.paypal.label.pay"),value:"pay"},{label:this.$tc("hipay.settings.paypal.label.subscribe"),value:"subscribe"},{label:this.$tc("hipay.settings.paypal.label.checkout"),value:"checkout"},{label:this.$tc("hipay.settings.paypal.label.buynow"),value:"buynow"}]}},mounted(){this.fetchConfig()},methods:{fetchConfig(){this.systemConfigApiService.getValues("HiPayPaymentPlugin").then(async e=>{this.config=e,this.environment=e["HiPayPaymentPlugin.config.environment"],this.setApiCredentials(),this.generateAuthorizationHeader();let t=await this.fetchAvailablePaymentProducts();this.processPayPalOptions(t)}).catch(()=>{this.isLoading=!1})},setApiCredentials(){let e="Stage"===this.environment?"publicLoginStage":"publicLoginProduction",t="Stage"===this.environment?"publicPasswordStage":"publicPasswordProduction";this.apiUsername=this.config[`HiPayPaymentPlugin.config.${e}`],this.apiPassword=this.config[`HiPayPaymentPlugin.config.${t}`]},generateAuthorizationHeader(){let e=btoa(`${this.apiUsername}:${this.apiPassword}`);this.authorizationHeader=`Basic ${e}`},async fetchAvailablePaymentProducts(){let e="Stage"===this.environment?"https://stage-secure-gateway.hipay-tpp.com/rest/v2/":"https://secure-gateway.hipay-tpp.com/rest/v2/",t=new URL(`${e}available-payment-products.json`);t.searchParams.append("eci",7),t.searchParams.append("operation",4),t.searchParams.append("payment_product","paypal"),t.searchParams.append("with_options","true");try{let e=await fetch(t,{method:"GET",headers:{Authorization:this.authorizationHeader,Accept:"application/json"}});if(!e.ok)throw Error(`HTTP error! status: ${e.status}`);return this.availablePaymentProducts=await e.json(),this.availablePaymentProducts}catch(e){return console.error("Error fetching available payment products:",e),null}},processPayPalOptions(e){if(e&&Array.isArray(e)){let t=e.find(e=>"paypal"===e.code);t&&t.options?this.isPayPalV2=""!==t.options.payer_id&&"v1"===t.options.provider_architecture_version:this.resetPayPalStatus()}else this.resetPayPalStatus()},resetPayPalStatus(){this.isPayPalV2=!1},updateColor(e){null===this.paymentMethod.customFields?this.paymentMethod.customFields={...this.paymentMethod.customFields,color:e}:this.paymentMethod.customFields.color=e},updateShape(e){null===this.paymentMethod.customFields?this.paymentMethod.customFields={...this.paymentMethod.customFields,shape:e}:this.paymentMethod.customFields.shape=e},updateLabel(e){null===this.paymentMethod.customFields?this.paymentMethod.customFields={...this.paymentMethod.customFields,label:e}:this.paymentMethod.customFields.label=e},updateHeight(e){null===this.paymentMethod.customFields?this.paymentMethod.customFields={...this.paymentMethod.customFields,height:e}:this.paymentMethod.customFields.height=e},updateBnpl(e){null===this.paymentMethod.customFields?this.paymentMethod.customFields={...this.paymentMethod.customFields,bnpl:e}:this.paymentMethod.customFields.bnpl=e}}}),n(118),Shopware.Component.override("sw-data-grid",{template:'{% block sw_data_grid_bulk %}\n  <div v-if="showSelection">\n    {% parent %}\n  </div>\n{% endblock %}\n\n{% block sw_data_grid_columns_render_value %}\n  <template v-if="column.property === \'quantity\' && item.editable">\n    <sw-number-field class="quantityInp"\n      numberType="int"\n      :min="1"\n      :max="item.quantity"\n      :value="item.quantity"\n      :disabled="!item.good || item.shipping"\n      @change="onValueChange(item, $event)"></sw-number-field>\n  </template>\n  <template v-else>\n    <span class="sw-data-grid__cell-value">\n      {{ renderColumn(item, column) }}\n    </span>\n  </template>\n{% endblock %}\n',methods:{onValueChange(e,t){this.$emit("quantity-change",t,e)}}}),n(6),Shopware.Component.override("sw-order-detail-details",{template:'{% block sw_order_detail_details_payment %}\n  {% parent %}\n  <sw-card v-if="order.extensions?.hipayOrder?.statusFlows?.length"\n    class="card-no-padding"\n    position-identifier="sw-settings-payment-detail-content"\n    :title="getTitle"\n    :is-loading="isLoading">\n    <sw-data-grid :dataSource="datasource"\n      :columns="columns"\n      :showSelection="false"\n      :showActions="false"></sw-data-grid>\n  </sw-card>\n{% endblock %}\n',inject:["hipayService"],computed:{datasource(){return this.order.extensions.hipayOrder.statusFlows.sort((e,t)=>new Date(t.createdAt).getTime()-new Date(e.createdAt).getTime()).map(e=>({...e,description:e.name?`${e.name} (${e.code})`:e.code,createdAt:new Date(e.createdAt).toLocaleString(),amount:this.hipayService.getCurrencyFormater(this.order.currency.isoCode).format(e.amount)}))},columns(){return[{property:"description",label:"Status"},{property:"createdAt",label:"Date"},{property:"message",label:"Message"},{property:"amount",label:"Amount"}]},getTitle(){return`${this.$t("hipay.transaction.title")} #${this.order.extensions.hipayOrder.transactionReference}`}}}),n(99),Shopware.Component.override("sw-order-detail",{template:'{% block sw_order_detail_actions_slot_smart_bar_actions %}\n  <template v-if="showOnHipayMethod">\n    <sw-button variant="contrast"\n      v-if="canCapture"\n      @click="openCapture"\n      :disabled="!acl.can(\'order.editor\')">\n      {{ $tc(\'hipay.action.capture\') }}\n    </sw-button>\n    <sw-button variant="contrast"\n      v-if="canRefund"\n      @click="openRefund"\n      :disabled="!acl.can(\'order.editor\')">\n      {{ $tc(\'hipay.action.refund\') }}\n    </sw-button>\n    <sw-button\n      :title="$tc(\'hipay.action.cancelOrderInfo\')"\n      variant="danger"\n      v-if="canCancel"\n      @click="openCancel"\n      :disabled="!acl.can(\'order.editor\')">\n      {{ $tc(\'hipay.action.cancelOrder\') }}\n    </sw-button>\n    <div class="separator" v-if="canCapture || canRefund || canCancel"></div>\n    {% parent %}\n    <sw-modal :title="$tc(\'hipay.action.capture\')"\n      v-if="showOrderCapture"\n      v-show="!showOrderStateForCapture"\n      @modal-close="closeOrderCaptureModal">\n      <sw-data-grid ref="basket"\n        :dataSource="orderBasket"\n        :columns="basketColumns"\n        :showActions="false"\n        :isRecordSelectable="isProductSelectable"\n        :showSelection="canPartialCapture"\n        @selection-change="onSelectProductForCapture"\n        @quantity-change="onQuantityChangeForCapture"\n        @hook:mounted="selectAllProducts"></sw-data-grid>\n      <br />\n      <div class="captureBtnGrp">\n        <sw-text-field :label="$tc(\'hipay.field.order_amount\')"\n          :value="formatCurrency(orderAmount)"\n          :disabled="true"></sw-text-field>\n        <sw-text-field :label="$tc(\'hipay.field.captured_amount\')"\n          :value="formatCurrency(capturedAmountInProgress)"\n          :disabled="true"></sw-text-field>\n      </div>\n      <div class="captureBtnGrp">\n        <sw-text-field :label="$tc(\'hipay.field.remaining_amount\')"\n          :value="formatCurrency(remainingCaptureAmount)"\n          :disabled="true"></sw-text-field>\n        <sw-number-field ref="captureAmount"\n          :label="$tc(\'hipay.field.capture_amount\')"\n          :min="0.01"\n          :max="remainingCaptureAmount"\n          :value="getCaptureAmount"\n          :allowEmpty="true"\n          :required="true"\n          :disabled="!canPartialCapture"\n          :isInvalid="isInvalidCaptureAmount"\n          @update:value="onManualCaptureAmount"\n          :placeholder="captureAmountPlaceholder ? formatCurrency(captureAmountPlaceholder) : null"></sw-number-field>\n      </div>\n      <template slot="modal-footer">\n        <sw-button @click="closeOrderCaptureModal">\n          {{ $tc(\'hipay.action.cancel\') }}\n        </sw-button>\n        <sw-button variant="primary"\n          v-if="canPartialCapture"\n          @click="captureOrder"\n          :disabled="isInvalidCaptureAmount">\n          {{ $tc(\'hipay.action.capture\') }}\n        </sw-button>\n        <sw-button variant="primary"\n          @click="fullCaptureOrder"\n          :disabled="isInvalidFullCaptureAmount">\n          {{ $tc(\'hipay.action.full_capture\') }}\n        </sw-button>\n      </template>\n    </sw-modal>\n    <sw-order-state-change-modal :order="order"\n      :isLoading="isLoadingRequest"\n      technicalName=""\n      v-if="showOrderStateForCapture"\n      @page-leave="closeOrderStateModal"\n      @page-leave-confirm="makeCapture"></sw-order-state-change-modal>\n\n    <sw-modal :title="$tc(\'hipay.action.refund\')"\n      v-if="showOrderRefund"\n      v-show="!showOrderStateForRefund"\n      @modal-close="closeOrderRefundModal">\n      <sw-data-grid ref="basket"\n        :dataSource="orderBasket"\n        :columns="basketColumns"\n        :showActions="false"\n        :isRecordSelectable="isProductSelectable"\n        :showSelection="canPartialRefund"\n        @selection-change="onSelectProductForRefund"\n        @quantity-change="onQuantityChangeForRefund"\n        @hook:mounted="selectAllProducts"></sw-data-grid>\n      <br />\n      <div class="refundBtnGrp">\n        <sw-text-field :label="$tc(\'hipay.field.captured_amount\')"\n          :value="formatCurrency(capturedAmount)"\n          :disabled="true"></sw-text-field>\n        <sw-text-field :label="$tc(\'hipay.field.refunded_amount\')"\n          :value="formatCurrency(refundedAmountInProgress)"\n          :disabled="true"></sw-text-field>\n      </div>\n      <div class="refundBtnGrp">\n        <sw-text-field :label="$tc(\'hipay.field.remaining_amount\')"\n          :value="formatCurrency(remainingRefundAmount)"\n          :disabled="true"></sw-text-field>\n        <sw-number-field ref="refundAmount"\n          :label="$tc(\'hipay.field.refund_amount\')"\n          :min="0.01"\n          :max="remainingRefundAmount"\n          :value="getRefundAmount"\n          :allowEmpty="true"\n          :required="true"\n          :isInvalid="isInvalidRefundAmount"\n          :disabled="!canPartialRefund"\n          @update:value="onManualRefundAmount"\n          :placeholder="refundAmountPlaceholder ? formatCurrency(refundAmountPlaceholder) : null"></sw-number-field>\n      </div>\n      <template slot="modal-footer">\n        <sw-button @click="closeOrderRefundModal">\n          {{ $tc(\'hipay.action.cancel\') }}\n        </sw-button>\n        <sw-button variant="primary"\n        v-if="canPartialRefund"\n          @click="refundOrder"\n          :disabled="isInvalidRefundAmount">\n          {{ $tc(\'hipay.action.refund\') }}\n        </sw-button>\n        <sw-button variant="primary"\n          @click="fullRefundOrder"\n          :disabled="isInvalidFullRefundAmount">\n          {{ $tc(\'hipay.action.full_refund\') }}\n        </sw-button>\n      </template>\n      <sw-order-state-change-modal :order="order"\n        :isLoading="isLoadingRequest"\n        technicalName=""\n        v-if="showOrderStateForRefund"\n        @page-leave="closeOrderStateModal"\n        @page-leave-confirm="makeRefund"></sw-order-state-change-modal>\n    </sw-modal>\n\n    <sw-order-state-change-modal :order="order"\n        :isLoading="isLoadingRequest"\n        technicalName=""\n        v-if="showOrderStateForCancel"\n        @page-leave="closeCancelModal"\n        @page-leave-confirm="makeCancel"></sw-order-state-change-modal>\n  </template>\n{% endblock %}\n{% block sw_order_detail_actions_abort %}\n  <sw-button\n    :title="$tc(\'hipay.action.resetModificationsInfo\')"\n    v-tooltip="{\n      message: $tc(\'sw-privileges.tooltip.warning\'),\n      disabled: acl.can(\'order.editor\'),\n      showOnDisabledElements: true\n      }"\n    class="sw-order-detail__smart-bar-cancel-button"\n    :disabled="isLoading || !acl.can(\'order.editor\')"\n    @click="onCancelEditing"\n    >\n      {{ $tc(\'hipay.action.resetModifications\') }}\n  </sw-button>\n{% endblock %}\n',inject:["hipayService"],data(){return{hipayOrderData:null,showOrderCapture:!1,showOrderRefund:!1,lastTransaction:null,lineItems:null,basketColumns:[{property:"label",label:this.$tc("hipay.basket.column.product"),multiLine:!0},{property:"quantity",label:this.$tc("hipay.basket.column.quantity")},{property:"totalPrice",label:this.$tc("hipay.basket.column.price")}],currency:null,captureAmount:null,refundAmount:null,manualCaptureAmount:null,manualRefundAmount:null,fullCapture:!0,fullRefund:!0,showOrderStateForCapture:!1,showOrderStateForRefund:!1,showOrderStateForCancel:!1,isLoadingRequest:!1}},watch:{order(){this.currency=this.order.currency.isoCode,this.lastTransaction=this.order.transactions.last(),this.hipayOrderData=this.order.extensions?.hipayOrder;let e=JSON.parse(JSON.stringify(this.order.lineItems));for(let t in this.order.shippingCosts.totalPrice>0&&e.push({label:this.$tc("hipay.basket.column.shipping"),quantity:1,totalPrice:this.order.shippingCosts.totalPrice,unitPrice:this.order.shippingCosts.totalPrice,shipping:!0}),e)e[t].currentQuantity=e[t].quantity;this.lineItems=e}},computed:{orderCriteria(){let e=this.$super("orderCriteria");return e.addAssociation("hipayOrder"),e.addAssociation("hipayOrder.captures"),e.addAssociation("hipayOrder.refunds"),e.addAssociation("hipayOrder.statusFlows"),e},showOnHipayMethod(){return/hipay/.test(this.lastTransaction?.paymentMethod?.formattedHandlerIdentifier)},canCancel(){return["authorized"].includes(this.lastTransaction?.stateMachineState?.technicalName)},canCapture(){return["refunded_partially","paid_partially","authorized"].includes(this.lastTransaction?.stateMachineState?.technicalName)&&this.orderAmount>this.capturedAmountInProgress},canPartialCapture(){return this.canCapture&&this.lastTransaction?.paymentMethod?.extensions?.hipayConfig?.allowPartialCapture!==!1},canRefund(){return["paid_partially","paid","refunded_partially"].includes(this.lastTransaction?.stateMachineState?.technicalName)&&this.capturedAmount>this.refundedAmountInProgress},canPartialRefund(){return this.canRefund&&this.lastTransaction?.paymentMethod?.extensions?.hipayConfig?.allowPartialRefund!==!1},orderBasket(){for(let e of this.lineItems)e.totalPrice=this.formatCurrency(e.unitPrice*e.currentQuantity),e.editable=this.canPartialCapture;return this.lineItems},orderAmount(){return this.order.amountTotal},capturedAmount(){return this.hipayOrderData.capturedAmount},capturedAmountInProgress(){return this.hipayOrderData.capturedAmountInProgress},remainingCaptureAmount(){return Number((this.orderAmount-this.capturedAmountInProgress).toFixed(2))},refundedAmountInProgress(){return this.hipayOrderData.refundedAmountInProgress},remainingRefundAmount(){return Number((this.capturedAmount-this.refundedAmountInProgress).toFixed(2))},getCaptureAmount(){return this.captureAmount??this.manualCaptureAmount},getRefundAmount(){return this.refundAmount??this.manualRefundAmount},isInvalidFullCaptureAmount(){return this.remainingCaptureAmount<=0},isInvalidCaptureAmount(){return!this.getCaptureAmount||this.isInvalidFullCaptureAmount},isInvalidFullRefundAmount(){return this.remainingRefundAmount<=0},isInvalidRefundAmount(){return!this.getRefundAmount||this.isInvalidFullRefundAmount},captureAmountPlaceholder(){return this.captureAmount>this.remainingCaptureAmount?this.remainingCaptureAmount:this.captureAmount},refundAmountPlaceholder(){return this.refundAmount>this.remainingRefundAmount?this.remainingRefundAmount:this.refundAmount}},methods:{formatCurrency(e){return this.hipayService.getCurrencyFormater(this.currency).format(e)},openCapture(){this.showOrderCapture=!0},openRefund(){this.showOrderRefund=!0},openCancel(){this.showOrderStateForCancel=!0},closeOrderCaptureModal(){for(let e in this.showOrderCapture=!1,this.captureAmount=null,this.manualCaptureAmount=null,this.lineItems)this.lineItems[e].currentQuantity=this.lineItems[e].quantity},closeOrderRefundModal(){for(let e in this.showOrderRefund=!1,this.refundAmount=null,this.manualRefundAmount=null,this.lineItems)this.lineItems[e].currentQuantity=this.lineItems[e].quantity},closeCancelModal(){this.showOrderStateForCancel=!1},onSelectProductForCapture(e){let t=0;for(let n in e)this.$refs.basket.isSelected(e[n].id)&&(t+=e[n].unitPrice*e[n].currentQuantity);this.captureAmount=t||null},onSelectProductForRefund(e){let t=0;for(let n in e)this.$refs.basket.isSelected(e[n].id)&&(t+=e[n].unitPrice*e[n].currentQuantity);this.refundAmount=t||null},selectAllProducts(){this.$refs.basket.selectAll(!0)},isProductSelectable(e){return e.good||e.shipping},onManualCaptureAmount(e){this.manualCaptureAmount=e},onManualRefundAmount(e){this.manualRefundAmount=e},onQuantityChangeForCapture(e,t){let n=this.lineItems.findIndex(e=>e.id===t.id);n>=0&&(this.lineItems[n].currentQuantity=e),this.onSelectProductForCapture(this.lineItems)},onQuantityChangeForRefund(e,t){let n=this.lineItems.findIndex(e=>e.id===t.id);n>=0&&(this.lineItems[n].currentQuantity=e),this.onSelectProductForRefund(this.lineItems)},captureOrder(){this.$refs.captureAmount.currentValue!==this.remainingCaptureAmount&&(this.fullCapture=!1),this.showOrderStateForCapture=!0},fullCaptureOrder(){this.showOrderStateForCapture=!0},refundOrder(){this.$refs.refundAmount.currentValue!==this.remainingRefundAmount&&(this.fullRefund=!1),this.showOrderStateForRefund=!0},fullRefundOrder(){this.showOrderStateForRefund=!0},closeOrderStateModal(){this.showOrderStateForCapture=!1,this.showOrderStateForRefund=!1},makeCancel(){this.isLoadingRequest=!0,this.hipayService.cancelTransaction(this.hipayOrderData).then(e=>{if(!e.success)throw Error(e.message);this.createNotificationSuccess({title:this.$tc("hipay.notification.cancel.title"),message:this.$tc("hipay.notification.cancel.success")}),this.showOrderStateForCancel=!1}).catch(()=>{this.createNotificationError({title:this.$tc("hipay.notification.capture.title"),message:this.$tc("hipay.notification.capture.failure")})}).finally(()=>this.isLoadingRequest=!1)},makeCapture(){this.isLoadingRequest=!0,this.hipayService.captureTransaction(this.hipayOrderData,this.fullCapture?this.remainingCaptureAmount:this.$refs.captureAmount.currentValue??this.captureAmountPlaceholder).then(e=>{if(!e.success)throw Error(e.message);this.onSaveEdits(),this.createNotificationSuccess({title:this.$tc("hipay.notification.capture.title"),message:this.$tc("hipay.notification.capture.success")}),this.showOrderStateForCapture=!1,this.$nextTick(()=>{this.showOrderCapture=!1})}).catch(()=>{this.createNotificationError({title:this.$tc("hipay.notification.capture.title"),message:this.$tc("hipay.notification.capture.failure")})}).finally(()=>this.isLoadingRequest=!1)},makeRefund(){this.isLoadingRequest=!0,this.hipayService.refundTransaction(this.hipayOrderData,this.fullRefund?this.remainingRefundAmount:this.$refs.refundAmount.currentValue??this.refundAmountPlaceholder).then(e=>{if(!e.success)throw Error(e.message);this.onSaveEdits(),this.createNotificationSuccess({title:this.$tc("hipay.notification.refund.title"),message:this.$tc("hipay.notification.refund.success")}),this.showOrderStateForRefund=!1,this.$nextTick(()=>{this.showOrderRefund=!1})}).catch(()=>{this.createNotificationError({title:this.$tc("hipay.notification.refund.title"),message:this.$tc("hipay.notification.refund.failure")})}).finally(()=>this.isLoadingRequest=!1)}}}),Shopware.Component.override("sw-order-state-change-modal-attach-documents",{template:'\n{% block sw_order_state_change_modal_attach_documents %}\n    <div class="sw-order-state-change-modal-attach-document">\n\n        \n        {% block sw_order_state_change_modal_attach_documents_documents_grid %}\n            <sw-order-document-card\n                    ref="attachDocuments"\n                    class="sw-order-detail-base__documents-grid"\n                    :order="order"\n                    :is-loading="isLoading"\n                    attach-view\n            />\n        {% endblock %}\n        <sw-loader v-if="isLoading" ></sw-loader>\n        \n        {% block sw_order_state_change_modal_attach_documents_button_wrapper %}\n            <div class="sw-order-state-change-modal-attach-documents__button-wrapper">\n                <div>\n                    \n                    {% block sw_order_state_change_modal_attach_documents_send_mail_switch %}\n                        <sw-switch-field\n                                v-model:value="sendMail"\n                                class="sw-order-state-change-modal-attach-documents__switch"\n                                :label="$tc(\'sw-order.stateCard.labelSendMailSwitch\')"\n                        />\n                    {% endblock %}\n                </div>\n\n                \n                {% block sw_order_state_change_modal_attach_documents_button %}\n                    <sw-button\n                            class="sw-order-state-change-modal-attach-documents__button"\n                            variant="primary"\n                            size="small"\n                            :disabled="isLoading"\n                            @click="onConfirm"\n                    >\n                        {{ $tc(\'sw-order.stateCard.labelSelectStateButton\') }}\n                    </sw-button>\n                {% endblock %}\n            </div>\n        {% endblock %}\n    </div>\n{% endblock %}\n'}),Shopware.Component.override("sw-settings-payment-detail",{template:'{% block sw_settings_payment_detail_content_card %}\n  {% parent %}\n  <template v-if="paymentMethod.formattedHandlerIdentifier == \'handler_hipay_applepay\'">\n    <hipay-settings-applepay :is-loading="isLoading"\n      :paymentMethod="paymentMethod">\n    </hipay-settings-applepay>\n  </template>\n  <template v-if="paymentMethod.formattedHandlerIdentifier == \'handler_hipay_creditcard\'">\n    <hipay-settings-cards-selector :is-loading="isLoading"\n      :paymentMethod="paymentMethod"></hipay-settings-cards-selector>\n  </template>\n  <template v-if="paymentMethod.formattedHandlerIdentifier == \'handler_hipay_multibanco\'">\n    <hipay-settings-multibanco :is-loading="isLoading"\n      :paymentMethod="paymentMethod"></hipay-settings-multibanco>\n  </template>\n  <template v-if="paymentMethod.formattedHandlerIdentifier == \'handler_hipay_paypal\'">\n    <hipay-settings-paypal :is-loading="isLoading"\n      :paymentMethod="paymentMethod"></hipay-settings-paypal>\n  </template>\n{% endblock %}\n'}),Shopware.Component.override("sw-order-state-history-card",{template:' {% block sw_order_state_history_card_transaction %}\n    <template v-if="isHipayPayment">\n        <sw-order-state-card-entry\n            v-if="transaction"\n            class="sw-order-state-history-card__payment-state"\n            :disabled="true"\n            :history="transactionHistory"\n            :transition-options="transactionOptions"\n            state-machine-name="order_transaction.state"\n            :title="$tc(\'sw-order.stateCard.headlineTransactionState\')"\n            @state-select="onTransactionStateSelected"\n        />\n    </template>\n    <template v-else>{% parent %}</template>\n{% endblock %}',computed:{isHipayPayment(){return this.transaction.paymentMethod.formattedHandlerIdentifier.startsWith("handler_hipay")}}});var s=JSON.parse('{"hipay":{"config":{"days":"days","help":{"manual":"Online manual","github":"Report Errors on github","version":"Version number"},"checkAccess":{"title":"HiPay Configuration","success":"Test API credentials: The HiPay API credentials are valid.","failure":"Test API credentials: The HiPay API credentials are not valid.","button":"Test API credentials"},"title":{"privateKey":"Private credentials","publicKey":"Public credentials","notification":"Notification settings"},"capture-help":"<b>Automatic</b>: All transactions will be automatically captured.<br/><b>Manual</b>: All transactions will be captured manually in your HiPay or Shopware back office.","operation-help":"<b>Hosted page</b>: The customer is redirected to a secure payment page hosted by HiPay.<br/><b>Hosted fields</b>: The customer will fill in their banking information directly on the merchant\'s website but the form fields will be hosted by HiPay. This mode is only valid for credit cards","info":"To inform you about events related to your payment system, e.g. about a new transaction or a 3-D Secure transaction, the HiPay Enterprise platform can send your application a server-to-server notification. Login to Hipay Back Office, go to Integration > Security Settings module and get your HiPay merchant account passphrase.","authenticationIndicator":"<b>3-D Secure authentication mandatory :</b><br/>An authentication is required to proceed (This authentication can either be a 3DSv2 Challenge flow or a 3DSv2 frictionless flow, without any user input required). If the authentication fails, the transaction will be refused and the client will not be charged.<br/><br/><b>3-D Secure authentication if available :</b><br/>If the Payment Method allows it, an authentication process is requested. However, if the authentication fails, the transaction will <b>not</b> be refused (<b>only for rest of the world transactions</b>, as transactions made inside the EURO zone are subject to PSD2 and <b>must</b> be authenticated).e. If required by the bank, the customer completes an additional authentication step for the charge to succeed.","logs":{"title":"Downloading logs","download":"Download logs","failure":"Fail to download logs"}},"action":{"cancel":"Cancel","cancelOrder":"Cancel order","resetModifications":"Reset","resetModificationsInfo":"Reset Form Modifications","cancelOrderInfo":"Cancel HiPay Transaction","capture":"Capture","refund":"Refund","full_capture":"Full Capture","full_refund":"Full Refund"},"basket":{"column":{"product":"Product","quantity":"Quantity","price":"Price","shipping":"Shipping costs"}},"field":{"capture_amount":"Capture amount","remaining_amount":"Remaining amount","order_amount":"Order amount","captured_amount":"Captured amount","refund_amount":"Refund amount","refunded_amount":"Refunded amount"},"notification":{"capture":{"title":"Transaction capture","success":"Transaction successfully captured","failure":"Error during transaction capture"},"refund":{"title":"Transaction refund","success":"Transaction successfully refunded","failure":"Error during transaction refund"},"cancel":{"title":"Cancel transaction","success":"Transaction canceled successfully","failure":"Error cancelling transaction"}},"transaction":{"title":"HiPay transaction lifecycle"},"settings":{"applepay":{"title":"Configuration","merchantName":"Merchant name","merchantId":"Merchant ID","buttonType":{"title":"Button type","default":"Default","buy":"Buy","setup":"Set-up","donate":"Donate","checkout":"Check-out","processing":"Processing","book":"Book","subscribe":"Subscribe"},"buttonStyle":{"title":"Button style","black":"Black","white":"White","whiteOutline":"White outline"}},"multibanco":{"title":"Payment expiration limit"},"creditcard":{"title":"Credit cards available","choice":"Select credit card"},"paypal":{"title":"Configuration PayPal v2","info":"The new PayPal integration allows you to pay with PayPal without redirection and to offer payment with installments. Available by invitation only at this time, please contact our support or your account manager for more information.","bnpl_label":"Activate \'Buy now, pay later\' feature","info_bnpl":"The \'Buy now, Pay later\' feature is only available if the store currency is euros and if the basket amount is between 30 and 2000.","color":{"title":"Button color","gold":"Gold","blue":"Blue","black":"Black","silver":"Silver","white":"White"},"shape":{"title":"Button shape","pill":"Rounded","rect":"Rectangle"},"label":{"title":"Button label","paypal":"PayPal","pay":"Pay","subscribe":"Subscribe","checkout":"Checkout","buynow":"Buy Now"},"height":{"title":"Button height"}}}}}'),r=JSON.parse('{"hipay":{"config":{"days":"Tage","help":{"manual":"Online-Handbuch","github":"Meldung eines Fehler auf GitHub","version":"Versionsnummer"},"checkAccess":{"title":"HiPay Configuration","success":"API-Anmeldeinformationen testen: Die API-Anmeldeinformationen von HiPay sind g\xfcltig.","failure":"Test API Credentials : Die API Credentials von HiPay sind nicht g\xfcltig.","button":"API-Anmeldedaten testen"},"capture-help":"<b>Automatich</b>: Alle Transaktionen werden automatisch erfasst.<br/><b>Manual</b>: Alle Transaktionen werden manuell in Ihrem HiPay- oder PrestaShop-Backoffice erfasst.","operation-help":"<b>Hostet Page</b>: Der Kunde wird zu einer sicheren, von HiPay gehosteten Zahlungsseite weitergeleitet. <b>Hosted Fields</b>: Der Kunde gibt seine Bankdaten direkt auf der Website des H\xe4ndlers ein, die Felder des Formulars werden jedoch von HiPay gehostet. Dieser Modus ist nur f\xfcr Kreditkarten g\xfcltig.","title":{"privateKey":"Private Anmeldedaten","publicKey":"\xd6ffentliche Anmeldedaten","notification":"Einstellungen f\xfcr Benachrichtigungen"},"info":"Um Sie \xfcber Ereignisse im Zusammenhang mit Ihrem Zahlungssystem zu informieren, z. B. \xfcber eine neue Transaktion oder eine 3-D Secure-Transaktion, kann die HiPay Plattform Ihrer Anwendung eine Server-to-Server-Benachrichtigung senden. Loggen Sie sich bei HiPay Console ein, w\xe4hlen Sie einen Account und klicken Sie Integration > Sicherheitseinstellungen um die geheime Passphrase abzurufen.","authenticationIndicator":"<b>3-D Secure-Authentifizierung obligatorisch :</b><br/>Zum Fortfahren ist eine Authentifizierung erforderlich (diese Authentifizierung kann entweder ein 3DSv2-Challenge-Flow oder ein reibungsloser 3DSv2-Flow sein, ohne dass eine Benutzereingabe erforderlich ist). Schl\xe4gt die Authentifizierung fehl, wird die Transaktion abgelehnt und der Kunde wird nicht belastet.<br/><br/><b>3-D Secure-Authentifizierung, falls verf\xfcgbar :</b><br/>Wenn die Zahlungsmethode dies zul\xe4sst, wird ein Authentifizierungsprozess angefordert. Wenn die Authentifizierung jedoch fehlschl\xe4gt, wird die Transaktion <b>nicht</b> abgelehnt (<b>nur f\xfcr den Rest der Welt</b>, da Transaktionen innerhalb der EURO-Zone PSD2 unterliegen und authentifiziert werden <b>m\xfcssen</b>).e. Falls von der Bank verlangt, f\xfchrt der Kunde einen zus\xe4tzlichen Authentifizierungsschritt durch, damit die Belastung erfolgreich ist.","logs":{"title":"Logs Herunterladen","download":"Logs herunterladen","failure":"Herunterladen von Dateien fehlgeschlagen"}},"action":{"cancel":"Absagen","cancelOrder":"Bestellung stornieren","resetModifications":"Zur\xfccksetzen","resetModificationsInfo":"\xc4nderungen des Formulars zur\xfccksetzen","cancelOrderInfo":"HiPay-Transaktion abbrechen","capture":"Erfassung","refund":"Erstattung","full_capture":"Vollst\xe4ndige Erfassung","full_refund":"Vollst\xe4ndige Erstattung"},"basket":{"column":{"product":"Produkt","quantity":"Menge","price":"Preis","shipping":"Versandkosten"}},"field":{"capture_amount":"Erfassungsbetrag","remaining_amount":"Restbetrag","order_amount":"Bestellbetrag","captured_amount":"Erfasster Betrag","refund_amount":"R\xfcckerstattungsbetrag","refunded_amount":"Erstatteter Betrag"},"notification":{"capture":{"title":"Transaktionserfassung","success":"Transaktion erfolgreich erfasst","failure":"Fehler bei der Transaktionserfassung"},"refund":{"title":"Transaktionsr\xfcckerstattung","success":"Transaktion erfolgreich zur\xfcckerstattet","failure":"Fehler bei der Transaktionsr\xfcckerstattung"},"cancel":{"title":"Transaktion abbrechen","success":"Transaktion erfolgreich abgebrochen","failure":"Fehler beim Abbrechen der Transaktion"}},"transaction":{"title":"HiPay-Transaktionslebenszyklus"},"settings":{"applepay":{"title":"Konfiguration","merchantName":"H\xe4ndlername","merchantId":"H\xe4ndler-ID","buttonType":{"title":"Schaltfl\xe4chentyp","default":"Standard","buy":"Kaufen","setup":"Einrichten","donate":"Spenden","checkout":"Auschecken","processing":"Verarbeitung","book":"Buchen","subscribe":"Abonnieren"},"buttonStyle":{"title":"Schaltfl\xe4chenstil","black":"Schwarz","white":"Wei\xdf","whiteOutline":"Wei\xdfer Umriss"}},"multibanco":{"title":"Zahlungsablauflimit"},"creditcard":{"title":"Kreditkarten verf\xfcgbar","choice":"Kreditkarte ausw\xe4hlen"},"paypal":{"title":"PayPal v2 Konfiguration","info":"ie neue PayPal-Integration erm\xf6glicht es Ihnen, mit PayPal zu bezahlen, ohne umgeleitet zu werden, und bietet die M\xf6glichkeit zur Ratenzahlung. Derzeit nur auf Einladung verf\xfcgbar. Bitte wenden Sie sich an unseren Support oder Ihren Account Manager f\xfcr weitere Informationen.","bnpl_label":"\'Jetzt kaufen, sp\xe4ter bezahlen\' Funktion aktivieren","info_bnpl":"Die Funktion \'Jetzt kaufen, sp\xe4ter bezahlen\' ist nur verf\xfcgbar, wenn die W\xe4hrung des Gesch\xe4fts Euro ist und wenn der Warenkorbwert zwischen 30 und 2000 liegt.","color":{"title":"Buttonfarbe","gold":"Gold","blue":"Blau","black":"Schwarz","silver":"Silber","white":"Wei\xdf"},"shape":{"title":"Buttonform","pill":"Abgerundet","rect":"Rechteck"},"label":{"title":"Buttonbeschriftung","paypal":"PayPal","pay":"Bezahlen","subscribe":"Abonnieren","checkout":"Kasse","buynow":"Jetzt kaufen"},"height":{"title":"Buttonh\xf6he"}}}}}');Shopware.Locale.extend("en-GB",s),Shopware.Locale.extend("de-DE",r)}()})();